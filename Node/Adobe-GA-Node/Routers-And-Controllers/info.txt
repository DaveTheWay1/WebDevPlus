Express Routers & Controllers

Express Generator
a popular tool: express-generator.
express-generator creates a “skeleton” Express app that:
Separates the HTTP server code from our web app’s logic.
Has best practice routing implemented.
Has key middleware configured and mounted by default.
Is configured to serve static assets from a public folder.
Will configure the EJS view engine (if we specify the -e option)
Has error handling configured.

Install express-generator
npm install -g express-generator
express-generator is a CLI that can be run from anywhere, that’s why we install it using the global -g flag.

Specify the View Engine
We’ll definitely want to use the EJS view engine each time we scaffold a new Express project.

-e
-ejs
--view=ejs
-v=ejs
The help above identifies the following option flags to make EJS the view engine
All of the above option flags do the exact same thing, kind of like the shortest one

Scaffold Our express-todos App
Let’s learn more about Express by building a simple To-Do app.
We scaffold an app using the express command:
express -e express-todos
^creates an express folder called express-todos with ejs view engine 

We now need to cd into the new folder and open in our text editor:

Install the Node Modules
Express generator has created a package.json that lists the necessary Node modules, however, those modules are not installed.
Let’s open a terminal session (option + backtick) and install them:
npm i

Renaming app.js to server.js
MERN/MEAN Stack apps often have a client-side file named app.js and this could get confusing having two app.js files, thus many developers name their main Express file server.js.
Rename app.js to server.js.
Inside of bin/www, we need to update line 7 to require server instead of app:
 var app = require('../app');
to:
 var app = require('../server');

 Starting the Application
 nodemon is still our best option and we can now just type nodemon which will use that same start script.
 Browsing to localhost:3000 greets us

 2. MVC Code Organization
 MVC (Model-View-Controller) has been a proven approach for organizing code for decades where the:

Model: Is the data concern
View: Is the presentation concern
Controller: Is the “processing” concern that processes the HTTP 
requests coming from the browser, CRUDs (Creates/Reads/Updates/Deletes) 
data using models, and ultimately responds to the browser’s request by 
rendering views and returning the resulting HTML or by issuing a redirect.

MVC in Express
Express, as it states on its landing page, is unopinionated. This means we are free to structure and organize our Express apps anyway we please.
In fact, many web frameworks such as Ruby on Rails, ASP.net, Spring MVC (Java), and others implement the MVC architectural pattern.
Accordingly, most Express developers use MVC to organize their Express applications as well…

Adding a models & controllers Folder
Express generator has already organized the view templates into a views folder.
So we just need to make folders to hold our model and controller modules:

