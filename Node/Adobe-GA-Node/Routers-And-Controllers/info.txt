Express Routers & Controllers

Express Generator
a popular tool: express-generator.
express-generator creates a “skeleton” Express app that:
Separates the HTTP server code from our web app’s logic.
Has best practice routing implemented.
Has key middleware configured and mounted by default.
Is configured to serve static assets from a public folder.
Will configure the EJS view engine (if we specify the -e option)
Has error handling configured.

Install express-generator
npm install -g express-generator
express-generator is a CLI that can be run from anywhere, that’s why we install it using the global -g flag.

Specify the View Engine
We’ll definitely want to use the EJS view engine each time we scaffold a new Express project.

-e
-ejs
--view=ejs
-v=ejs
The help above identifies the following option flags to make EJS the view engine
All of the above option flags do the exact same thing, kind of like the shortest one

Scaffold Our express-todos App
Let’s learn more about Express by building a simple To-Do app.
We scaffold an app using the express command:
express -e express-todos
^creates an express folder called express-todos with ejs view engine 

We now need to cd into the new folder and open in our text editor:

Install the Node Modules
Express generator has created a package.json that lists the necessary Node modules, however, those modules are not installed.
Let’s open a terminal session (option + backtick) and install them:
npm i

Renaming app.js to server.js
MERN/MEAN Stack apps often have a client-side file named app.js and this could get confusing having two app.js files, thus many developers name their main Express file server.js.
Rename app.js to server.js.
Inside of bin/www, we need to update line 7 to require server instead of app:
 var app = require('../app');
to:
 var app = require('../server');

 Starting the Application
 nodemon is still our best option and we can now just type nodemon which will use that same start script.
 Browsing to localhost:3000 greets us

 2. MVC Code Organization
 MVC (Model-View-Controller) has been a proven approach for organizing code for decades where the:

Model: Is the data concern
View: Is the presentation concern
Controller: Is the “processing” concern that processes the HTTP 
requests coming from the browser, CRUDs (Creates/Reads/Updates/Deletes) 
data using models, and ultimately responds to the browser’s request by 
rendering views and returning the resulting HTML or by issuing a redirect.

MVC in Express
Express, as it states on its landing page, is unopinionated. This means we are free to structure and organize our Express apps anyway we please.
In fact, many web frameworks such as Ruby on Rails, ASP.net, Spring MVC (Java), and others implement the MVC architectural pattern.
Accordingly, most Express developers use MVC to organize their Express applications as well…

Adding a models & controllers Folder
Express generator has already organized the view templates into a views folder.
So we just need to make folders to hold our model and controller modules:
mkdir models controllers
With the models, views and controllers folders set up, we’re ready to discuss best practice routing…

4. Best Practice Routing
In our first-express app, we used the app.get method to define routes and although it worked, the better practice is to:
Use Express router objects to define routes for a particular purpose or dedicated to a certain data resource such as todos.
Create each router in its own module from which it is exported.
Inside of server.js require and mount the router object in the request pipeline.
***Note: A data resource is a “type” of data/information that applications create, read, update and/or delete (CRUD).***

Best Practice Routing Set Up by Express Generator
As an example of using this better approach to routing, let’s look at how express-generator sets up routing…
First, there’s a routes folder containing two router modules:
index.js: Great for defining general purpose routes, e.g., the root route.
users.js: An example of a router dedicated to a data resource, in this case, users.

Note how routes are defined on those two router objects using router.get() method call just like we did previously with app.get()
Each router object has one route defined - compare those two routes, notice the HTTP methods and the paths? They’re the same - isn’t that a problem? Nope, they’re not actually the same because of the way the routers are mounted in server.js…

Router Objects in the Scaffolded App
The two route modules are required on lines 7 & 8 of server.js.
Then those routers are mounted in the middleware pipeline with the app.use method on lines 22 & 23:
app.use('/', indexRouter);
app.use('/users', usersRouter);
IMPORTANT KEY POINT: The path specified in app.use is a “starts with path”. It is prepended to the paths specified in the router object forming the actual path.

Determining the Actual Path of a Route Defined in a Router Object
Let’s say you have a router object that defines a route like this:

// routes/todos.js

var express = require('express');
var router = express.Router();

router.get('/', function(req, res) {...

and is mounted like this:
const todosRouter = require('./routes/todos');
// All routes defined in todosRouter will start with /todos
app.use('/todos', todosRouter);

❓ What is the actual path of the route?
The starts with path is /todos and the path of the defined route is just / which doesn't change the actual path, thus the actual path is /todos
the actual path is essentially what you actually type in on the browser search bar. you would type / in the end but that doesnt appear unlike the example below...

// routes/calendar.js

var express = require('express');
var router = express.Router();

router.get('/today', function(req, res) {...
and is mounted like this:

const calendarRouter = require('./routes/calendar');

app.use('/calendar', calendarRouter);
❓ What is the actual path of the above route?
The starts with path is /calendar and the path of the defined route is /today making the actual path /calendar/today