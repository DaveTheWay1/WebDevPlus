What is Node.js?
Node.js is a runtime environment for executing JavaScript outside of the browser!

Node’s runtime environment for JS is different than that in the browser, primarily because:
It doesn’t have the browser’s DOM or Web APIs.
Node has low-level networking and file system APIs that browser JS does not (for security reasons).

Node is very “lightweight”, i.e., only low-level “core” modules for networking, filesystem access, etc. are built-in.
However, its functionality is extended via open source libraries called packages. These packages are managed using the npm command installed with Node.

Node’s package ecosystem is the largest open source ecosystem in the world.

Created in 2009 by Ryan Dahl with Joyent, Inc.
Uses the same V8 JavaScript Engine used in the Chrome browser to compile JS programs into machine code.
In addition to being used to build high-performance web applications, Node is also a great tool for building command-line tools.
Node is an open source project governed by the OpenJSFoundation/Node.js Foundation with board representation



Node’s REPL
REPL is an acronym for Read-Evaluate-Print-Loop.

To start Node’s interactive REPL we type node in Terminal
In the REPL we can write JS and even load Node modules, which we’re going to learn about in this lesson
control-c twice to exit REPL.

Executing Node Programs
Executing a Node app is as easy as typing node in Terminal followed by the name of the module. For example, if you have a module named main.js:
node main.js
*** Note that you don’t need to include the “.js” file extension.

Is Node.js a programming language?
No. It is a runtime environment for executing JavaScript outside of the browser.

Is const el = document.getElementById('my-list'); a valid JavaScript statement in a Node app?
No, because there is no DOM in Node.

Why the Enthusiasm for Node.js?
performance 
businesses can handle more traffic with less hardware!

developer synergy
Developers can use JavaScript on both client & server, thus becoming a full-stack dev is more obtainable and companies can better utilize their developer resources across the front and back-ends.

businesses saving money.
The improvements in server performance and developer productivity result in
Businesses saving money results in wide adoption
Most importantly, wide adoption of Node.js results in strong demand for Node developers!

Why is Node.js so Performant?
It’s important to understand how time consuming Input/Output operations are.
Node’s Asynchronous / Event-driven design enables non-blocking Input/Output

Because Node’s high-performance, non-blocking I/O operations must be designed as asynchronous methods, a Node developer will use callback functions and/or promises extensively.